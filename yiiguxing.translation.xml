<application>
  <component name="AppStorage">
    <histories>
      <item value="This works great in principle. But in practice, like many algorithms centered on atomic updates to a single location, it scales horribly when there are more than a few participants using the same Exchanger. So the implementation instead uses a form of elimination arena, that spreads out this contention by arranging that some threads typically use different slots, while still ensuring that eventually, any two parties will be able to exchange items. That is, we cannot completely partition across threads, but instead give threads arena indices that will on average grow under contention and shrink under lack of contention. We approach this by defining the Nodes that we need anyway as ThreadLocals, and include in them per-thread index and related bookkeeping state. (We can safely reuse per-thread nodes rather than creating them fresh each time because slots alternate between pointing to a node vs null, so cannot encounter ABA problems. However, we do need some care in resetting them between uses.) Implementing an effective arena requires allocating a bunch of space, so we only do so upon detecting contention (except on uniprocessors, where they wouldn't help, so aren't used). Otherwise, exchanges use the single-slot slotExchange method. On contention, not only must the slots be in different locations, but the locations must not encounter memory contention due to being on the same cache line (or more generally, the same coherence unit). Because, as of this writing, there is no way to determine cacheline size, we define a value that is enough for common platforms. Additionally, extra care elsewhere is taken to avoid other falseunintended sharing and to enhance locality, including adding padding (via @Contended) to Nodes, embedding &quot;bound&quot; as an Exchanger field. The arena starts out with only one used slot. We expand the effective arena size by tracking collisions; i.e., failed CASes while trying to exchange. By nature of the above algorithm, the only kinds of collision that reliably indicate contention are when two attempted releases collide -- one of two attempted offers can legitimately fail to CAS without indicating contention by more than one other thread. (Note: it is possible but not worthwhile to more precisely detect contention by reading slot values after CAS failures.) When a thread has collided at each slot within the current arena bound, it tries to expand the arena size by one. We track collisions within bounds by using a version (sequence) number on the &quot;bound&quot; field, and conservatively reset collision counts when a participant notices that bound has been updated (in either direction). The effective arena size is reduced (when there is more than one slot) by giving up on waiting after a while and trying to decrement the arena size on expiration. The value of &quot;a while&quot; is an empirical matter. We implement by piggybacking on the use of spin-&gt;yield-&gt;block that is essential for reasonable waiting performance anyway -- in a busy exchanger, offers are usually almost immediately released, in which case context switching on multiprocessors is extremely slowwasteful. Arena waits just omit the blocking part, and instead cancel. The spin count is empirically chosen to be a value that avoids blocking 99% of the time under maximum sustained exchange rates on a range of test machines. Spins and yields entail some limited randomness (using a cheap xorshift) to avoid regular patterns that can induce unproductive growshrink cycles. (Using a pseudorandom also helps regularize spin cycle duration by making branches unpredictable.) Also, during an offer, a waiter can &quot;know&quot; that it will be released when its slot has changed, but cannot yet proceed until match is set. In the mean time it cannot cancel the offer, so instead spinsyields. Note: It is possible to avoid this secondary check by changing the linearization point to be a CAS of the match field (as done in one case in the Scott &amp; Scherer DISC paper), which also increases asynchrony a bit, at the expense of poorer collision detection and inability to always reuse per-thread nodes. So the current scheme is typically a better tradeoff. On collisions, indices traverse the arena cyclically in reverse order, restarting at the maximum index (which will tend to be sparsest) when bounds change. (On expirations, indices instead are halved until reaching 0.) It is possible (and has been tried) to use randomized, prime-value-stepped, or double-hash style traversal instead of simple cyclic traversal to reduce bunching. But empirically, whatever benefits these may have don't overcome their added overhead: We are managing operations that occur very quickly unless there is sustained contention, so simplerfaster control policies work better than more accurate but slower ones. Because we use expiration for arena size control, we cannot throw TimeoutExceptions in the timed version of the public exchange method until the arena size has shrunken to zero (or the arena isn't enabled). This may delay response to timeout but is still within spec. Essentially all of the implementation is in methods slotExchange and arenaExchange. These have similar overall structure, but differ in too many details to combine. The slotExchange method uses the single Exchanger field &quot;slot&quot; rather than arena array elements. However, it still needs minimal collision detection to trigger arena construction. (The messiest part is making sure interrupt status and InterruptedExceptions come out right during transitions when both methods may be called. This is done by using null return as a sentinel to recheck interrupt status.) As is too common in this sort of code, methods are monolithic because most of the logic relies on reads of fields that are maintained as local variables so can't be nicely factored -- mainly, here, bulky spin-&gt;yield-&gt;blockcancel code. Note that field Node.item is not declared as volatile even though it is read by releasing threads, because they only do so after CAS operations that must precede access, and all uses by the owning thread are otherwise acceptably ordered by other operations. (Because the actual points of atomicity are slot CASes, it would also be legal for the write to Node.match in a release to be weaker than a full volatile write. However, this is not done because it could allow further postponement of the write, delaying progress.)" />
      <item value="Region Grid" />
      <item value="Dummy Grid" />
      <item value="Purchase Cost Tax" />
      <item value="total Price Contain Tax" />
      <item value="actual Gross Profit Amount" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="5" />
        <entry key="ENGLISH" value="6" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1636806440513" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1676253674306" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="CHINESE" />
    <option name="targetLanguageSelection" value="LAST" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="2207" />
    <option name="newTranslationDialogY" value="450" />
    <histories>
      <item value="アプリファーム書き込みユーザID" />
      <item value="get User Id Write Position" />
      <item value="get Size" />
      <item value="data Content" />
      <item value="デフォルト値を取得する" />
      <item value="設定値一覧を取得する" />
      <item value="ROADのデフォルト歯数" />
      <item value="FC Teeth Pattern" />
      <item value="json経由でデータを取得し、一時的に固定値に設定" />
      <item value="ロー" />
      <item value="トップ" />
      <item value="Asserts that the expected array is structurally equal to the actual array, i.e. contains the same number of the same elements in the same order, with an optional message. The elements are compared for equality with the equals function. For floating point numbers it means that NaN is equal to itself and -0.0 is not equal to 0.0." />
      <item value="ミドル" />
      <item value="本処理ではOTHERは使わないが、定義上必要なため-1としておく" />
      <item value="ボルト" />
      <item value="アシスト比[%]" />
      <item value="ユニット名" />
      <item value="ライディングキャラリスティックのUIでの設定値をテーブル値に変換" />
      <item value="アシスト比、アシスト出力、上限トルク(DU-E80007000)の 「アシスト比」テーブル" />
      <item value="JSONの即値をアシスト開始のレベルに変換します" />
      <item value="cs Teeth Patternデータ取得" />
      <item value="jsonデータ取得" />
      <item value="RDのCS歯組パターンを取得する" />
      <item value="CS Teeth Patternインスタンスの作成" />
      <item value="preset Valueに基づいて対応するデータを見つける" />
      <item value="Performs the given action on the encapsulated Throwable exception if this instance represents failure. Returns the original Result unchanged." />
      <item value="Note, that this function rethrows any Throwable exception thrown by onFailure function." />
      <item value="Returns the encapsulated value if this instance represents success or the result of onFailure function for the encapsulated Throwable exception if it is failure." />
      <item value="exception" />
      <item value="predicate" />
      <item value="certification" />
      <item value="Manufacture IDチェック" />
      <item value="selectable Display Contents Advance Screen Types属性取得" />
      <item value="Returns the index of the first occurrence of the specified element in the list, or -1 if the specified element is not contained in the list." />
      <item value="Manufacture ID, FixNo, Product IDからバッテリ情報を検索する" />
      <item value="bt listなし-&gt;未知のバッテリー設定" />
      <item value="Manufacture" />
      <item value="バッテリー名からバッテリー情報(Manufacture ID, FixNo, Product ID)を取得する" />
      <item value="バッテリオブジェクト" />
      <item value="バッテリに対応するセルのリストを取得" />
      <item value="絞ったバッテリー名の一覧を返す" />
      <item value="選択したドライブユニットと互換のある第二世代バッテリーの一覧を取得" />
      <item value="指定したバッテリーユニットのエラーチェックの種類を取得する" />
      <item value="指定したユニットの画像ファイル名を取得する" />
      <item value="Exception In Initializer Error" />
      <item value="Runs a new coroutine and blocks the current thread interruptibly until its completion. This function should not be used from a coroutine. It is designed to bridge regular blocking code to libraries that are written in suspending style, to be used in main functions and in tests." />
      <item value="設定範囲" />
      <item value="選択範囲を取得する" />
      <item value="UI設定値を取得する" />
      <item value="Assist Power" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="495" />
        <entry key="DANISH" value="1" />
        <entry key="ENGLISH" value="138" />
        <entry key="ITALIAN" value="1" />
        <entry key="JAPANESE" value="496" />
      </map>
    </option>
  </component>
</application>