<application>
  <component name="AppStorage">
    <histories>
      <item value="This works great in principle. But in practice, like many algorithms centered on atomic updates to a single location, it scales horribly when there are more than a few participants using the same Exchanger. So the implementation instead uses a form of elimination arena, that spreads out this contention by arranging that some threads typically use different slots, while still ensuring that eventually, any two parties will be able to exchange items. That is, we cannot completely partition across threads, but instead give threads arena indices that will on average grow under contention and shrink under lack of contention. We approach this by defining the Nodes that we need anyway as ThreadLocals, and include in them per-thread index and related bookkeeping state. (We can safely reuse per-thread nodes rather than creating them fresh each time because slots alternate between pointing to a node vs null, so cannot encounter ABA problems. However, we do need some care in resetting them between uses.) Implementing an effective arena requires allocating a bunch of space, so we only do so upon detecting contention (except on uniprocessors, where they wouldn't help, so aren't used). Otherwise, exchanges use the single-slot slotExchange method. On contention, not only must the slots be in different locations, but the locations must not encounter memory contention due to being on the same cache line (or more generally, the same coherence unit). Because, as of this writing, there is no way to determine cacheline size, we define a value that is enough for common platforms. Additionally, extra care elsewhere is taken to avoid other falseunintended sharing and to enhance locality, including adding padding (via @Contended) to Nodes, embedding &quot;bound&quot; as an Exchanger field. The arena starts out with only one used slot. We expand the effective arena size by tracking collisions; i.e., failed CASes while trying to exchange. By nature of the above algorithm, the only kinds of collision that reliably indicate contention are when two attempted releases collide -- one of two attempted offers can legitimately fail to CAS without indicating contention by more than one other thread. (Note: it is possible but not worthwhile to more precisely detect contention by reading slot values after CAS failures.) When a thread has collided at each slot within the current arena bound, it tries to expand the arena size by one. We track collisions within bounds by using a version (sequence) number on the &quot;bound&quot; field, and conservatively reset collision counts when a participant notices that bound has been updated (in either direction). The effective arena size is reduced (when there is more than one slot) by giving up on waiting after a while and trying to decrement the arena size on expiration. The value of &quot;a while&quot; is an empirical matter. We implement by piggybacking on the use of spin-&gt;yield-&gt;block that is essential for reasonable waiting performance anyway -- in a busy exchanger, offers are usually almost immediately released, in which case context switching on multiprocessors is extremely slowwasteful. Arena waits just omit the blocking part, and instead cancel. The spin count is empirically chosen to be a value that avoids blocking 99% of the time under maximum sustained exchange rates on a range of test machines. Spins and yields entail some limited randomness (using a cheap xorshift) to avoid regular patterns that can induce unproductive growshrink cycles. (Using a pseudorandom also helps regularize spin cycle duration by making branches unpredictable.) Also, during an offer, a waiter can &quot;know&quot; that it will be released when its slot has changed, but cannot yet proceed until match is set. In the mean time it cannot cancel the offer, so instead spinsyields. Note: It is possible to avoid this secondary check by changing the linearization point to be a CAS of the match field (as done in one case in the Scott &amp; Scherer DISC paper), which also increases asynchrony a bit, at the expense of poorer collision detection and inability to always reuse per-thread nodes. So the current scheme is typically a better tradeoff. On collisions, indices traverse the arena cyclically in reverse order, restarting at the maximum index (which will tend to be sparsest) when bounds change. (On expirations, indices instead are halved until reaching 0.) It is possible (and has been tried) to use randomized, prime-value-stepped, or double-hash style traversal instead of simple cyclic traversal to reduce bunching. But empirically, whatever benefits these may have don't overcome their added overhead: We are managing operations that occur very quickly unless there is sustained contention, so simplerfaster control policies work better than more accurate but slower ones. Because we use expiration for arena size control, we cannot throw TimeoutExceptions in the timed version of the public exchange method until the arena size has shrunken to zero (or the arena isn't enabled). This may delay response to timeout but is still within spec. Essentially all of the implementation is in methods slotExchange and arenaExchange. These have similar overall structure, but differ in too many details to combine. The slotExchange method uses the single Exchanger field &quot;slot&quot; rather than arena array elements. However, it still needs minimal collision detection to trigger arena construction. (The messiest part is making sure interrupt status and InterruptedExceptions come out right during transitions when both methods may be called. This is done by using null return as a sentinel to recheck interrupt status.) As is too common in this sort of code, methods are monolithic because most of the logic relies on reads of fields that are maintained as local variables so can't be nicely factored -- mainly, here, bulky spin-&gt;yield-&gt;blockcancel code. Note that field Node.item is not declared as volatile even though it is read by releasing threads, because they only do so after CAS operations that must precede access, and all uses by the owning thread are otherwise acceptably ordered by other operations. (Because the actual points of atomicity are slot CASes, it would also be legal for the write to Node.match in a release to be weaker than a full volatile write. However, this is not done because it could allow further postponement of the write, delaying progress.)" />
      <item value="Region Grid" />
      <item value="Dummy Grid" />
      <item value="Purchase Cost Tax" />
      <item value="total Price Contain Tax" />
      <item value="actual Gross Profit Amount" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="5" />
        <entry key="ENGLISH" value="6" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1636806440513" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1678089963997" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="CHINESE" />
    <option name="targetLanguageSelection" value="LAST" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="2207" />
    <option name="newTranslationDialogY" value="450" />
    <histories>
      <item value="対応しているマスターユニットかどうかを判定する シリーズ番号のみで判定できるもののみ" />
      <item value="ブートローダ" />
      <item value="Uncomment this to preserve the line number information for debugging stack traces." />
      <item value="keepattributes" />
      <item value="If your project uses WebView with JS, uncomment the following and specify the fully qualified class name to the JavaScript interface" />
      <item value="keepclassmembers" />
      <item value="renamesourcefileattribute" />
      <item value="Assigns this product flavor to the 'version' flavor dimension." />
      <item value="Specifies the flavor dimensions you want to use. The order in which you list each dimension determines its priority, from highest to lowest, when Gradle merges variant sources and configurations. You must assign each product flavor you configure to one of the flavor dimensions." />
      <item value="Shortcut extension method to allow easy access to the predefined `release`" />
      <item value="Add project specific ProGuard rules here. You can control the set of applied configuration files using the proguardFiles setting in build.gradle. For more details, see http:developer.android.comguidedevelopingtoolsproguard.html If your project uses WebView with JS, uncomment the following and specify the fully qualified class name to the JavaScript interface class: -keepclassmembers class fqcn.of.javascript.interface.for.webview { public ; } Uncomment this to preserve the line number information for debugging stack traces. -keepattributes SourceFile,LineNumberTable If you keep the line number information, uncomment this to hide the original source file name. -renamesourcefileattribute SourceFile" />
      <item value="Adds an ANT style exclude pattern. This method may be called multiple times to append new patterns and multiple patterns may be specified in a single call. If excludes are not provided, then no files will be excluded. If excludes are provided, then files must not match any exclude pattern to be processed." />
      <item value="Configure the directory to assemble the compiled classes into." />
      <item value="Returns the source directory trees that make up this set. Does not filter source directories that do not exist." />
      <item value="Configure the directory to assemble the compiled classes into. Returns: The destination directory property for this set of sources." />
      <item value="Returns the directory property that is bound to the task that produces the output via compiledBy(TaskProvider, Function). Use this as part of a classpath or input to another task to ensure that the output is created before it is used. Note: To define the path of the output folder use" />
      <item value="Returns the directory property that is bound to the task that produces the output via compiledBy(TaskProvider, Function). Use this as part of a classpath or input to another task to ensure that the output is created before it is used. Note: To define the path of the output folder use getDestinationDirectory() Returns: The classes directory property for this set of sources." />
      <item value="Retrieves the sourceSets extension." />
      <item value="Specifies source files or directories for a copy. The given paths are evaluated as per org.gradle" />
      <item value="Specifies source files or directories for a copy. The given paths are evaluated as per org.gradle.api.Project.files(Object...)." />
      <item value="Sets the value of the property the given value, replacing whatever value the property already had. This method can also be used to discard the value of the property, by passing null as the value. The convention for this property, if any, will be used to provide the value instead. Params: value – The value, can be null." />
      <item value="navigation" />
      <item value="Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in. Call sites of any declaration annotated with that marker should opt in to the API either by using OptIn, or by being annotated with that marker themselves, effectively causing further propagation of the opt-in requirement." />
      <item value="This class requires opt-in itself and can only be used with the compiler argument -Xopt-in=kotlin.RequiresOptIn." />
      <item value="Returns the filter used to select the source from the source directories. These filter patterns are applied after the include and exclude patterns of this source directory set. Generally, the filter patterns are used to restrict the contents to certain types of files, eg .java." />
      <item value="Closure" />
      <item value="Codegen" />
      <item value="exclude Declarations From Codegen" />
      <item value="A Provider that will return the task when queried. The task may be created and configured at this point, if not already." />
      <item value="The 'java' plugin has been applied, but it is not compatible with the Android plugins." />
      <item value="Adds an ANT style include pattern. This method may be called multiple times to append new patterns and multiple patterns may be specified in a single call. If includes are not provided, then all files in this container will be included. If includes are provided, then a file must match at least one of the include patterns to be processed." />
      <item value="Configures class filter in order to exclude declarations marked by specific annotations." />
      <item value="When constructing an instance of A, a naive injector implementation might go into an infinite loop constructing an instance of B to set on A, a second instance of A to set on B, a second instance of B to set on the second instance of A, and so on. A conservative injector might detect the circular dependency at build time and generate an error, at which point the programmer could break the circular dependency by injecting Provider&lt;A&gt; or Provider&lt;B&gt; instead of A or B respectively. Calling get() on the provider directly from the constructor or method it was injected into defeats the provider's ability to break up circular dependencies. In the case of method or field injection, scoping one of the dependencies (using singleton scope, for example) may also enable a valid circular relationship." />
      <item value="Attached to a task property to indicate that the property specifies some input value for the task. This annotation should be attached to the getter method in Java or the property in Groovy. Annotations on setters or just the field in Java are ignored. This will cause the task to be considered out-of-date when the property has changed. This annotation cannot be used on a java.io.File object. If you want to refer to the file path, independently of its contents, return a String instead which returns the absolute path. If, instead, you want to refer to the contents and path of a file or a directory, use InputFile or InputDirectory respectively." />
      <item value="Excludes have priority over includes." />
      <item value="declarations" />
      <item value="Configures class filter in order to include and exclude specific classes." />
      <item value="データサイズ" />
      <item value="マップ1" />
      <item value="Indicates that a feature is incubating. This means that the feature is currently a work-in-progress and may change at any time." />
      <item value="Basic Mode Profile Data Parcelable" />
      <item value="Suspension ModeをCDとする" />
      <item value="attention" />
      <item value="スプリンター" />
      <item value="switchconditionc" />
      <item value="リア シフト アップ" />
      <item value="常にギア位置制御が設定されるか" />
      <item value="アプリファーム書き込みユーザID" />
      <item value="get User Id Write Position" />
      <item value="get Size" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="504" />
        <entry key="DANISH" value="1" />
        <entry key="ENGLISH" value="181" />
        <entry key="ITALIAN" value="1" />
        <entry key="JAPANESE" value="505" />
        <entry key="LUXEMBOURGISH" value="1" />
      </map>
    </option>
  </component>
</application>